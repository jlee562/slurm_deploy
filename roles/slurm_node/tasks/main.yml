  - name: set password fact
    set_fact:
      my_pass: "{{ pwd_alias }}"
    
  - name: set hostname
    command: hostnamectl set-hostname {{slurm_name}}
    ignore_errors: yes
    
  - name: remove slurm
    yum:
      name: ['slurm', 'slurm*', 'slurm-*']
      update_cache: yes
      state: absent

  - name: Update and upgrade yum packages
    yum:
      name: ['perl-ExtUtils-MakeMaker', 'python3', 'rpm-build', 'nfs-utils', 'munge', 'munge-libs', 'munge-devel', 'mariadb-devel', 'mariadb-server', 'rng-tools', 'openssl', 'openssl-devel', 'pam-devel', 'numactl', 'numactl-devel', 'hwloc', 'hwloc-devel', 'lua', 'lua-devel', 'readline-devel', 'rrdtool-devel', 'ncurses-devel', 'man2html', 'libibmad', 'libibumad']
      update_cache: yes
      state: present

############INSTALL OPENMPI#################

  - name: Download file and force basic auth
    get_url:
      url: https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.1.tar.gz
      dest: /packages/openmpi-4.1.1.tar.gz
    
  - name: untar openmpi
    command: tar -xzvf /packages/openmpi-4.1.1.tar.gz

  - name: configure
    command: cd /packages/openmpi-4.1.1 && ./configure --prefix=/packages/openmpi/openmpi-4.1.1/ --with-ucx=/packages/ucx --enable-mca-no-build=btl-uct
    
  - name: make
    command: cd /packages/openmpi-4.1.1 && sudo make all install
    
  - name: setup bash
    command: echo "export PATH=$PATH:/packages/openmpi/openmpi-4.1.1/bin" >> $HOME/.bashrc && echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/packages/openmpi/openmpi-4.1.1/lib" >> $HOME/.bashrc 
  
############################################

  - name: create users
    command: groupadd -g {{MUNGEUSER}} munge
    ignore_errors: yes
  - name: create users
    command: useradd  -m -c "MUNGE Uid 'N' Gid Emporium" -d /var/lib/munge -u {{MUNGEUSER}} -g munge  -s /sbin/nologin munge
    ignore_errors: yes
  - name: create users
    command: groupadd -g {{SLURMUSER}} slurm
    ignore_errors: yes
  - name: create users
    command: useradd  -m -c "SLURM workload manager" -d /var/lib/slurm -u {{SLURMUSER}} -g slurm  -s /bin/bash slurm
    ignore_errors: yes

############################################

  - name: make sure directory exists
    file:
      path: /packages/slurm/config/
      state: directory

############################################

  - name: create munge key
    shell: dd if=/dev/urandom bs=1 count=1024
    register: shell_output
  - name: write munge key
    copy:
      content: "{{ shell_output.stdout }}"
      dest: "/etc/munge/munge.key"
    delegate_to: localhost

  - file:
      path: /etc/munge/munge.key
      owner: munge
      group: munge
      mode: 0400


############################################

  - name: download slurm
    get_url:
      url: https://download.schedmd.com/slurm/slurm-20.11.8.tar.bz2
      dest: /scratch/

  - name: rpm build
    command: rpmbuild --define '_with_pmix --with-pmix=/packages/pmix/install/2.1' -ta /scratch/slurm-20.11.8.tar.bz2

  - name: cp rpm's
    copy:
      src: "{{ item }}"
      dest: /scratch/
    with_fileglob:
      - /root/rpmbuild/RPMS/x86_64/slurm-*
    register: rpms_copied

  - set_fact:
      rpm_list: "{{ rpms_copied.results | map(attribute='dest') | list}}"

  - name: install slurm
    yum:
      name: "{{rpm_list}}"

  - name:
    command: mv /etc/slurm/slurm.conf.example /etc/slurm/slurm.conf
    ignore_errors: yes

############ add new hosts here ############

  - name: check host file for correct hosts
    lineinfile: dest=/etc/hosts line="{{login_ip}}        {{login_name}}"
  - name: check host file for correct hosts
    lineinfile: dest=/etc/hosts line="{{compute1_ip}}        {{compute1_name}}"
  - name: check host file for correct hosts
    lineinfile: dest=/etc/hosts line="{{compute2_ip}}        {{compute2_name}}"
  - name: check host file for correct hosts
    lineinfile: dest=/etc/hosts line="{{compute3_ip}}        {{compute3_name}}"
  - name: check host file for correct hosts
    lineinfile: dest=/etc/hosts line="{{compute4_ip}}        {{compute4_name}}"

############ add new hosts here ############

  - name: check slurm config is correct
    lineinfile: dest=/etc/slurm/slurm.conf line="NodeName={{login_name}} NodeAddr={{login_ip}} CPUs=8 State=UNKNOWN"
  - name: check slurm config is correct
    lineinfile: dest=/etc/slurm/slurm.conf line="NodeName={{compute1_name}} NodeAddr={{compute1_ip}} CPUs=44 State=UNKNOWN"
  - name: check slurm config is correct
    lineinfile: dest=/etc/slurm/slurm.conf line="NodeName={{compute2_name}} NodeAddr={{compute2_ip}} CPUs=44 State=UNKNOWN"
  - name: check slurm config is correct
    lineinfile: dest=/etc/slurm/slurm.conf line="NodeName={{compute3_name}} NodeAddr={{compute3_ip}} CPUs=44 State=UNKNOWN"
  - name: check slurm config is correct
    lineinfile: dest=/etc/slurm/slurm.conf line="NodeName={{compute4_name}} NodeAddr={{compute4_ip}} CPUs=44 State=UNKNOWN"

######## update lines in file  ########

  - name: check slurm config is correct
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^PartitionName=debug"
      line: PartitionName={{partition_name}} Nodes=omniacompute[1-{{number_nodes}}] Default=YES MaxTime=INFINITE State=UP

  - name: remove default node
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^NodeName=server Procs=1 State=UNKNOWN"
      state: absent

  - name: remove default node
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^NodeName=linux[1-32] Procs=1 State=UNKNOWN"
      state: absent

  - name: change control machine
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^ControlMachine="
      line: ControlMachine={{login_name}}

  - name: change control machine
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^SelectType="
      line: SelectType=select/cons_res

  - name: change control machine
    lineinfile:
      name: /etc/slurm/slurm.conf
      regexp: "^#SelectTypeParameters="
      line: SelectTypeParameters=CR_Core


############################################

  - name: copy files to shared storage
    command: cp /etc/slurm/slurm.conf /scratch/
  - name: copy files to shared storage
    command: cp /etc/munge/munge.key /scratch
  - name: change permissions
    command: chmod -R 777 /scratch
  - name: copy files to shared storage
    command: cp /etc/slurm/slurm.conf /packages/slurm/config/slurm.conf
    ignore_errors: yes
  - name: remove local file
    command: rm -rf /etc/slurm/slurm.conf
    ignore_errors: yes
  - name: symbolic link
    command: ln -s /packages/slurm/config/slurm.conf /etc/slurm/slurm.conf
    ignore_errors: yes

############################################

  - name: enable munge
    command: systemctl enable munge
  - name: start munge
    command: systemctl restart munge
  - name: enable slurmd
    command: systemctl enable slurmctld
  - name: restart slurmd
    command: systemctl restart slurmctld
    
#############################################

########## ADD USERS ###########

  - name: Add the user 'john'
    ansible.builtin.user:
      name: john
      password: "{{ my_pass }}"
      comment: Johnathan
      uid: 1999
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa

  - name: Add the user 'jason'
    ansible.builtin.user:
      name: jason
      password: "{{ my_pass }}"
      comment: Jason
      uid: 2000
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa
      
  - name: Add the user 'will'
    ansible.builtin.user:
      name: will
      password: "{{ my_pass }}"
      comment: William
      uid: 2001
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa

